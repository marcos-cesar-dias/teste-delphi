unit TestUFuncionarioPersist;
{

  Delphi DUnit Test Case
  ----------------------
  This unit contains a skeleton test case class generated by the Test Case Wizard.
  Modify the generated code to correctly setup and call the methods from the unit
  being tested.

}

interface

uses
  TestFramework, UIPersist, System.Generics.Collections, UFuncionario,
  UFuncionarioPersist, UDependente;

type
  // Test methods for class TFuncionarioPersist

  TestTFuncionarioPersist = class(TTestCase)
  strict private
    FFuncionarioPersist: TFuncionarioPersist;
  public
    procedure SetUp; override;
    procedure TearDown; override;
  published

  private // colocado para não aparecer nos testes
    procedure TestGet;
    procedure TestGetById;
    procedure TestSave;
    procedure TestDelete;
  end;

implementation

procedure TestTFuncionarioPersist.SetUp;
begin
  FFuncionarioPersist := TFuncionarioPersist.Create;
end;

procedure TestTFuncionarioPersist.TearDown;
begin
  FFuncionarioPersist.Free;
  FFuncionarioPersist := nil;
end;

procedure TestTFuncionarioPersist.TestGet;
var
  ReturnValue: TList<TFuncionario>;
  func: TFuncionario;
begin
  ReturnValue := FFuncionarioPersist.Get;

  assert(ReturnValue.Count <> 0, 'ta errado');
  assert(ReturnValue[0].Nome = 'Maria');

  if assigned(ReturnValue) then
  begin
    for func in returnvalue do
    begin
      func.free;
    end;
    ReturnValue.Free;
  end;

end;

procedure TestTFuncionarioPersist.TestGetById;
var
  ReturnValue: TFuncionario;
  Id: Integer;
begin
  try
    Id := 2;
    ReturnValue := FFuncionarioPersist.GetById(Id);
    assert(ReturnValue.Nome = 'Maria');
  finally
    if assigned(ReturnValue) then
      ReturnValue.Free;
  end;

end;

procedure TestTFuncionarioPersist.TestSave;
var
  ReturnValue: Boolean;
  Entidade: TFuncionario;
begin
  try
    Entidade := TFuncionario.Create(0, 'Maria', '321', 10100);
    entidade.AddDependente(TDependente.Create(0,0,'fulano',true,true));
    entidade.AddDependente(TDependente.Create(0,0,'Beltrano',true,false));
    entidade.AddDependente(TDependente.Create(0,0,'ciclano',true,True));
    entidade.AddDependente(TDependente.Create(0,0,'João',true,False));
    entidade.AddDependente(TDependente.Create(0,0,'Jose',false,False));
    ReturnValue := FFuncionarioPersist.Save(Entidade);
  finally
    if assigned(Entidade) then
      Entidade.Free
  end;

end;

procedure TestTFuncionarioPersist.TestDelete;
var
  ReturnValue: Boolean;
  Entidade: TFuncionario;
begin
  // TODO: Setup method call parameters
  entidade := TFuncionario.Create(1,'','',0);

  try
    ReturnValue := FFuncionarioPersist.Delete(Entidade);
  finally
    entidade.Free;
  end;

  // TODO: Validate method results
end;

initialization

// Register any test cases with the test runner
RegisterTest(TestTFuncionarioPersist.Suite);

end.
